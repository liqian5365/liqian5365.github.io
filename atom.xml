<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时光不等人</title>
  
  <subtitle>linnyli</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liqian5365.github.io/"/>
  <updated>2018-08-21T06:34:10.163Z</updated>
  <id>https://liqian5365.github.io/</id>
  
  <author>
    <name>linnyli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react PureComponent</title>
    <link href="https://liqian5365.github.io/2018/08/21/react-PureComponent/"/>
    <id>https://liqian5365.github.io/2018/08/21/react-PureComponent/</id>
    <published>2018-08-21T03:30:19.000Z</published>
    <updated>2018-08-21T06:34:10.163Z</updated>
    
    <content type="html"><![CDATA[<p>读文笔记：原创来自掘金。</p><h1 id="1-为什么使用？"><a href="#1-为什么使用？" class="headerlink" title="1.为什么使用？"></a>1.为什么使用？</h1><p>PureComponent使用非常的方便，可以减少不必要的#render#次数。来提高性能，还可以减少shouldComponentUpdate函数，节省了一些代码量。</p><h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h1><p>组件的更新条件就是 state或者 props发生了改变。<br>如果都没有发生改变的话render是不会被触发。<br>这样就会减少 Virtual DOM的生成和对比过程，达到提升性能的目的。<br>因为react帮助我们做了一层浅比较、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (this._compositeType === CompositeTypes.PureClass) &#123;</span><br><span class="line">  shouldUpdate = !shallowEqual(prevProps, nextProps)</span><br><span class="line">  || !shallowEqual(inst.state, nextState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而 shallowEqual 又做了什么呢？会比较 Object.keys(state | props) 的长度是否一致，每一个 key是否两者都有，并且是否是一个引用，也就是只比较了第一层的值，确实很浅，所以深层的嵌套数据是对比不出来的。</p><h1 id="3-使用指南"><a href="#3-使用指南" class="headerlink" title="3.使用指南"></a>3.使用指南</h1><ul><li>易变数据不能使用一个引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  const &#123; items &#125; = this.state;</span><br><span class="line">  items.pop();</span><br><span class="line">  this.setState(&#123; items &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>应该改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">handleClick = () =&gt; &#123;</span><br><span class="line">  const &#123; items &#125; = this.state;</span><br><span class="line">  items.pop();</span><br><span class="line">  this.setState(&#123; items: [].concat(items) &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>不变数据使用一个引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt; MyInput onChange=&#123;e =&gt; this.props.update(e.target.value)&#125; /&gt;</span><br><span class="line">//或者</span><br><span class="line">update(e) &#123;</span><br><span class="line">  this.props.update(e.target.value)</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  return &lt; MyInput onChange=&#123;this.update.bind(this)&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>由于每次 render 操作 MyInput 组件的 onChange 属性都会返回一个新的函数，由于引用不一样，所以父组件的 render 也会导致 MyInput 组件的 render，即使没有任何改动，所以需要尽量避免这样的写法，最好这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">update = (e) =&gt; &#123;</span><br><span class="line">  this.props.update(e.target.value)</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  return &lt; MyInput onChange=&#123;this.update&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>复杂状态与简单状态不要共用一个组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  return (&lt; div&gt;</span><br><span class="line">    &lt; ul&gt;</span><br><span class="line">      &#123;this.state.items.map((i, k) =&gt; &lt; li key=&#123;k&#125;&gt; &#123;...&#125;&lt; /li&gt;)&#125;</span><br><span class="line">    &lt; /ul&gt;</span><br><span class="line">    &lt; input value=&#123;this.state.value&#125; onChange=&#123;this.change&#125; /&gt;</span><br><span class="line">  &lt; /div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输入框的值可能经常变动，它会给列表带来必然的diff操作，那么就把input抽出成一个单独的PUreComponent组件。</p><p>与shouldComponentUpdate共存</p><p>如果 PureComponent 里有 shouldComponentUpdate 函数的话，直接使用 shouldComponentUpdate 的结果作为是否更新的依据，没有shouldComponentUpdate 函数的话，才会去判断是不是 PureComponent ，是的话再去做 shallowEqual浅比较。</p><h1 id="PureComponent真正起作用的，只是在一些纯展示组件上"><a href="#PureComponent真正起作用的，只是在一些纯展示组件上" class="headerlink" title="PureComponent真正起作用的，只是在一些纯展示组件上"></a>PureComponent真正起作用的，只是在一些纯展示组件上</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读文笔记：原创来自掘金。&lt;/p&gt;
&lt;h1 id=&quot;1-为什么使用？&quot;&gt;&lt;a href=&quot;#1-为什么使用？&quot; class=&quot;headerlink&quot; title=&quot;1.为什么使用？&quot;&gt;&lt;/a&gt;1.为什么使用？&lt;/h1&gt;&lt;p&gt;PureComponent使用非常的方便，可以减少不
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas生成图片采坑</title>
    <link href="https://liqian5365.github.io/2018/08/17/canvas%E7%94%BB%E5%9B%BE%E8%B8%A9%E5%9D%91/"/>
    <id>https://liqian5365.github.io/2018/08/17/canvas画图踩坑/</id>
    <published>2018-08-17T08:33:32.000Z</published>
    <updated>2018-08-20T12:35:05.679Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/bg_8_17_1.jpeg" alt="alt"><br>图文无关，只是比较喜欢这张图片，就随手放在文章了。<br>做过两次需要生成图片的需求，基本都是活动页面，把用户测试的结果通过图片的形式展示出来，生成图片出发点估计是想方便用户保存并且分享吧。<br>第一次做的一个需求大概是：十二道题目，根据用户的选择，将结果画成对应的雷达图，并且生成带有二维码的图片，这样在微信里面直接保存或者分享都非常的方便。</p><p>#h1难点两个：1.雷达图的实现 2.cnavas画图<br>关于雷达图的实现：<br>1.确定雷达图的维度，根据维度将圆形等分。<br>实现结果如图<br><img src="/images/3_2.jpeg" alt="alt"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const drawPolygon = function(ctx) &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.strokeStyle = mColorPolygon;</span><br><span class="line">  let mW = 300;</span><br><span class="line">  let mH = 300;</span><br><span class="line">  let mCount = 6; //边数</span><br><span class="line">  let mCenter = mW / 2; //中心点</span><br><span class="line">  let mRadius = mCenter -5;</span><br><span class="line">  let mAngle = Math.PI * 2 / mCount; //角度</span><br><span class="line">  let r = mRadius / 4; //单位半径</span><br><span class="line">  let mColorPolygon = &apos;#5a5ff1&apos;; //多边形颜色</span><br><span class="line">  let mCenterX = mW/2;</span><br><span class="line">  let mCenterY = mH/2;</span><br><span class="line">  for(let i = 5; i &gt;0; i--) &#123;//梯度为4</span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      let currR = r * ( i - 1); //当前半径</span><br><span class="line">      //画6条边</span><br><span class="line">      for(let j = 0; j &lt; mCount; j++) &#123;</span><br><span class="line">          let x = mCenterX + currR * Math.cos(mAngle * j);</span><br><span class="line">          let y = mCenterY + currR * Math.sin(mAngle * j);</span><br><span class="line">          ctx.lineTo(x, y);</span><br><span class="line">          if(i == 5)&#123;</span><br><span class="line">              ctx.fillStyle = &apos;#ffe5fd&apos;;</span><br><span class="line">          &#125; else if(i ==4)&#123;</span><br><span class="line">              ctx.fillStyle = &apos;#fed4fb&apos;;</span><br><span class="line">          &#125; else if(i == 3)&#123;</span><br><span class="line">              ctx.fillStyle = &apos;#fec1f9&apos;;</span><br><span class="line">          &#125; else if(i == 2)&#123;</span><br><span class="line">              ctx.fillStyle = &apos;#feaaf7&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">          ctx.fill();</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.closePath();</span><br><span class="line">      ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line">const canvas = document.createElement(&apos;canvas&apos;);</span><br><span class="line">$(&apos;body&apos;).html(canvas)</span><br><span class="line">canvas.className = &apos;radarToPic&apos;;</span><br><span class="line">canvas.height = 300;</span><br><span class="line">canvas.width = 300;</span><br><span class="line">const ctx=canvas.getContext(&quot;2d&quot;);</span><br><span class="line">drawPolygon(ctx)</span><br></pre></td></tr></table></figure></p><p>接下来根据数据来描点<br><img src="/images/3_3.jpeg" alt="alt"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const drawPoint = function (ctx) &#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  let r = mCenter / 50;</span><br><span class="line">  for(let i = 0; i &lt; mCount; i++) &#123;</span><br><span class="line">      let x = mCenterX +  mRadius * Math.cos(mAngle * i) * mData[i] / 4;</span><br><span class="line">      let y = mCenterY +  mRadius * Math.sin(mAngle * i) * mData[i] / 4;</span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      ctx.arc(x, y, r, 0, Math.PI * 2);</span><br><span class="line">      ctx.fillStyle = &apos;rgba(255,0, 91,1)&apos;;</span><br><span class="line">      ctx.fill();</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将点连接起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const  drawLine = function(ctx) &#123;</span><br><span class="line">  ctx.strokeStyle = &apos;rgba(255,255,255,0)&apos;;</span><br><span class="line">  ctx.fillStyle = &apos;rgba(254,47,47,0.5)&apos;;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  for(let i = 0; i &lt; mCount; i++) &#123;</span><br><span class="line">      let x = mCenterX + mRadius* Math.cos(mAngle * i) * mData[i] / 4;</span><br><span class="line">      let y = mCenterY + mRadius* Math.sin(mAngle * i) * mData[i] / 4;</span><br><span class="line">      ctx.lineTo(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/3_4.jpeg" alt="alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/bg_8_17_1.jpeg&quot; alt=&quot;alt&quot;&gt;&lt;br&gt;图文无关，只是比较喜欢这张图片，就随手放在文章了。&lt;br&gt;做过两次需要生成图片的需求，基本都是活动页面，把用户测试的结果通过图片的形式展示出来，生成图片出发点估计是想方便用户保存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css梯形实现</title>
    <link href="https://liqian5365.github.io/2018/08/09/css%E6%A2%AF%E5%BD%A2%E5%AE%9E%E7%8E%B0/"/>
    <id>https://liqian5365.github.io/2018/08/09/css梯形实现/</id>
    <published>2018-08-09T11:56:10.000Z</published>
    <updated>2018-08-20T11:35:26.637Z</updated>
    
    <content type="html"><![CDATA[<p>之前复习css的时候在网上看了一下用css来实现各种图形，什么圆形，三角形，梯形等等。<br>当我们设计把UI稿给我的时候大概看了一下，还好，应该不会很难。<br><img src="/images/1_2.jpeg" alt="alt"><br>然后整个写样式的流程大概是这样的：<br>1.首先温习一下三角形的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">div &#123;</span><br><span class="line"> width:120px;height:0;margin:100px auto;</span><br><span class="line"> border-left:80px solid transparent;</span><br><span class="line"> border-right:80px solid transparent;</span><br><span class="line"> border-bottom:150px solid #8900CE;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/1_1.jpeg" alt="alt"><br>2.再变个形，就是个实心梯形了。好了，梯形可以是实现了。开心。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"> width:120px;height:0;margin:100px auto;</span><br><span class="line"> border-left:80px solid transparent;</span><br><span class="line"> border-right:80px solid transparent;</span><br><span class="line"> border-bottom:150px solid lightcoral;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/1_3.jpeg" alt="alt"><br>一个实心的梯形。哭。<br>好像不太满足需求。<br>终于在各种帮助下找到了一种可以实现空心梯形的方法：<br>transform: skew()<br>先来看下效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">   width: 150px;</span><br><span class="line">   height: 100px;</span><br><span class="line">   border: 5px solid lightsalmon;</span><br><span class="line">   transform: skew(-20deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/1_4.jpeg" alt="alt"><br>很接近设计稿了。<br>但是设计稿上，梯形里面是有图片的。<br>放个图片试试效果。<br><img src="/images/1_5.jpeg" alt="alt"><br>但是图片里面的金鱼好像有点变形了。<br>然后给图片做一个变形，和外部梯形反方向。图片形状正常了一些。<br><img src="/images/1_6.jpeg" alt="alt"><br>做到这一步，整个UI图比较难的部分就已经完成了。<br>之后再更新没有想起来的点吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前复习css的时候在网上看了一下用css来实现各种图形，什么圆形，三角形，梯形等等。&lt;br&gt;当我们设计把UI稿给我的时候大概看了一下，还好，应该不会很难。&lt;br&gt;&lt;img src=&quot;/images/1_2.jpeg&quot; alt=&quot;alt&quot;&gt;&lt;br&gt;然后整个写样式的流程大概是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>千里之行。</title>
    <link href="https://liqian5365.github.io/2018/08/06/hello-world/"/>
    <id>https://liqian5365.github.io/2018/08/06/hello-world/</id>
    <published>2018-08-06T11:42:35.586Z</published>
    <updated>2018-08-09T11:51:11.501Z</updated>
    
    <content type="html"><![CDATA[<p>终于弄得差不多了。<br>可以开始漫长有聊的博客生涯了。<br>虽然有点晚，但是总归开始了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于弄得差不多了。&lt;br&gt;可以开始漫长有聊的博客生涯了。&lt;br&gt;虽然有点晚，但是总归开始了。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
