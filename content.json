{"meta":{"title":"时光不等人","subtitle":"linnyli","description":null,"author":"linnyli","url":"https://liqian5365.github.io"},"pages":[],"posts":[{"title":"canvas生成图片采坑","slug":"2018-8-17","date":"2018-08-17T08:33:32.000Z","updated":"2018-08-20T12:33:02.526Z","comments":true,"path":"2018/08/17/2018-8-17/","link":"","permalink":"https://liqian5365.github.io/2018/08/17/2018-8-17/","excerpt":"","text":"图文无关，只是比较喜欢这张图片，就随手放在文章了。做过两次需要生成图片的需求，基本都是活动页面，把用户测试的结果通过图片的形式展示出来，生成图片出发点估计是想方便用户保存并且分享吧。第一次做的一个需求大概是：十二道题目，根据用户的选择，将结果画成对应的雷达图，并且生成带有二维码的图片，这样在微信里面直接保存或者分享都非常的方便。 #h1难点两个：1.雷达图的实现 2.cnavas画图关于雷达图的实现：1.确定雷达图的维度，根据维度将圆形等分。实现结果如图1234567891011121314151617181920212223242526272829303132333435363738394041424344const drawPolygon = function(ctx) &#123; ctx.save(); ctx.strokeStyle = mColorPolygon; let mW = 300; let mH = 300; let mCount = 6; //边数 let mCenter = mW / 2; //中心点 let mRadius = mCenter -5; let mAngle = Math.PI * 2 / mCount; //角度 let r = mRadius / 4; //单位半径 let mColorPolygon = &apos;#5a5ff1&apos;; //多边形颜色 let mCenterX = mW/2; let mCenterY = mH/2; for(let i = 5; i &gt;0; i--) &#123;//梯度为4 ctx.beginPath(); let currR = r * ( i - 1); //当前半径 //画6条边 for(let j = 0; j &lt; mCount; j++) &#123; let x = mCenterX + currR * Math.cos(mAngle * j); let y = mCenterY + currR * Math.sin(mAngle * j); ctx.lineTo(x, y); if(i == 5)&#123; ctx.fillStyle = &apos;#ffe5fd&apos;; &#125; else if(i ==4)&#123; ctx.fillStyle = &apos;#fed4fb&apos;; &#125; else if(i == 3)&#123; ctx.fillStyle = &apos;#fec1f9&apos;; &#125; else if(i == 2)&#123; ctx.fillStyle = &apos;#feaaf7&apos;; &#125; ctx.fill(); &#125; ctx.closePath(); ctx.stroke(); &#125; ctx.restore();&#125;const canvas = document.createElement(&apos;canvas&apos;);$(&apos;body&apos;).html(canvas)canvas.className = &apos;radarToPic&apos;;canvas.height = 300;canvas.width = 300;const ctx=canvas.getContext(&quot;2d&quot;);drawPolygon(ctx) 接下来根据数据来描点12345678910111213const drawPoint = function (ctx) &#123; ctx.save(); let r = mCenter / 50; for(let i = 0; i &lt; mCount; i++) &#123; let x = mCenterX + mRadius * Math.cos(mAngle * i) * mData[i] / 4; let y = mCenterY + mRadius * Math.sin(mAngle * i) * mData[i] / 4; ctx.beginPath(); ctx.arc(x, y, r, 0, Math.PI * 2); ctx.fillStyle = &apos;rgba(255,0, 91,1)&apos;; ctx.fill(); &#125; ctx.restore();&#125; 将点连接起来123456789101112131415const drawLine = function(ctx) &#123; ctx.strokeStyle = &apos;rgba(255,255,255,0)&apos;; ctx.fillStyle = &apos;rgba(254,47,47,0.5)&apos;; ctx.save(); ctx.beginPath(); for(let i = 0; i &lt; mCount; i++) &#123; let x = mCenterX + mRadius* Math.cos(mAngle * i) * mData[i] / 4; let y = mCenterY + mRadius* Math.sin(mAngle * i) * mData[i] / 4; ctx.lineTo(x, y); &#125; ctx.closePath(); ctx.stroke(); ctx.fill(); ctx.restore();&#125;","raw":null,"content":null,"categories":[],"tags":[]},{"title":"css梯形实现","slug":"css梯形实现","date":"2018-08-09T11:56:10.000Z","updated":"2018-08-20T11:35:26.637Z","comments":true,"path":"2018/08/09/css梯形实现/","link":"","permalink":"https://liqian5365.github.io/2018/08/09/css梯形实现/","excerpt":"","text":"之前复习css的时候在网上看了一下用css来实现各种图形，什么圆形，三角形，梯形等等。当我们设计把UI稿给我的时候大概看了一下，还好，应该不会很难。然后整个写样式的流程大概是这样的：1.首先温习一下三角形的实现： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;title&gt;测试&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;div &#123; width:120px;height:0;margin:100px auto; border-left:80px solid transparent; border-right:80px solid transparent; border-bottom:150px solid #8900CE;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2.再变个形，就是个实心梯形了。好了，梯形可以是实现了。开心。123456div &#123; width:120px;height:0;margin:100px auto; border-left:80px solid transparent; border-right:80px solid transparent; border-bottom:150px solid lightcoral;&#125; 一个实心的梯形。哭。好像不太满足需求。终于在各种帮助下找到了一种可以实现空心梯形的方法：transform: skew()先来看下效果：123456div &#123; width: 150px; height: 100px; border: 5px solid lightsalmon; transform: skew(-20deg);&#125; 很接近设计稿了。但是设计稿上，梯形里面是有图片的。放个图片试试效果。但是图片里面的金鱼好像有点变形了。然后给图片做一个变形，和外部梯形反方向。图片形状正常了一些。做到这一步，整个UI图比较难的部分就已经完成了。之后再更新没有想起来的点吧。","raw":null,"content":null,"categories":[],"tags":[]},{"title":"千里之行。","slug":"hello-world","date":"2018-08-06T11:42:35.586Z","updated":"2018-08-09T11:51:11.501Z","comments":true,"path":"2018/08/06/hello-world/","link":"","permalink":"https://liqian5365.github.io/2018/08/06/hello-world/","excerpt":"","text":"终于弄得差不多了。可以开始漫长有聊的博客生涯了。虽然有点晚，但是总归开始了。","raw":null,"content":null,"categories":[],"tags":[]}]}